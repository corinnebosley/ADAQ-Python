#!/usr/bin/env python
"""
Generalised script to retrieve files from mass

Run using ./aq_mass_retrieve.py [inifilename]
"""
from __future__ import print_function
from six.moves.builtins import str

import warnings
import os
import sys

#Find adaq directory -
# should be in directory above the one containing this file
adaq_path = os.path.dirname(os.path.realpath(__file__))+'/../'
sys.path.append(adaq_path)
import adaqcode

VERBOSE = False

def mass_retrieval(inifilename=None, ini_dict=None, retrieve=True):
    """
    Wrapper script to read in variables from ini file and then
    perform mass retrieval.

    :param inifilename: filename of inifile. If set to None,
                        taken from command line argument if passed in,
                        or else to default name of 'aq_mass_retrieve.ini'
    :param retrieve: Logical. If True, perform retrieval.
                     If set to False, sets up directories and moo select file
                     but doesn't actual call moo command. Useful for
                     testing/examples).

    Example. Note here as we are just doing an example, set retrieve=False:

    >>> mass_retrieval(retrieve=False)
    ... # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE
    Reading inifile .../aq_mass_retrieve.ini
    Retrieving for period  2015-03-26 00:00:00 2015-03-28 00:00:00
    Moose Retrieval Command:
    moo select -f .../mass_retrievals/mi-ah183/mooselect_20150326_20150328.txt \
moose:/devfc/mi-ah183/field.pp .../mass_retrievals/mi-ah183
    Moose Retrieval Command:
    moo select -f .../mass_retrievals/sppo/mooselect_2015.txt \
moose:/opfc/atm/postpro/prods/2015.tar moose:/opfc/atm/postpro/prods/2016.tar \
.../mass_retrievals/sppo
    Retrieving for period  2015-03-26 00:00:00 2015-03-28 00:00:00
    Moose Retrieval Command:
    moo get -f \
    moose:/adhoc/users/john.hemmings/mi-aw675/20150326T0000Z_Fields_grid1_*20150326????.txt.gz \
    moose:/adhoc/users/john.hemmings/mi-aw675/20150326T0000Z_Fields_grid1_*201503270000.txt.gz \
    moose:/adhoc/users/john.hemmings/mi-aw675/20150327T0000Z_Fields_grid1_*20150327????.txt.gz \
    moose:/adhoc/users/john.hemmings/mi-aw675/20150327T0000Z_Fields_grid1_*201503280000.txt.gz \
    .../mass_retrievals/mi-aw675
    """

    if ini_dict is None:
        ini_dict = adaqcode.inifile.get_inidict(
            inifilename, defaultfilename='adaqscripts/aq_mass_retrieve.ini')

    for imodel, model_id in enumerate(ini_dict['models_id_list']):

        #If start and end data can not be found from ini_dict,
        #set to None - all available dates will be retrieved.
        start_datetime = ini_dict.get('start_datetime', None)
        end_datetime = ini_dict.get('end_datetime', None)

        #If short_name_list is not set, retrieve all species
        short_name_list = ini_dict.get('short_name_list', None)

        #If runtime can not be found from ini_dict, assume set to 18Z.
        if 'models_runtime_list' in ini_dict:
            runtime = ini_dict['models_runtime_list'][imodel]
        else:
            runtime = 18
            warnings.warn("Setting runtime to default = "+str(runtime))

        #If operational can not be found from ini_dict, assume set to False
        if 'models_op_list' in ini_dict:
            operational = ini_dict['models_op_list'][imodel]
        else:
            operational = False
            warnings.warn("Setting operational to default = "+str(operational))

        #If psuite can not be found from ini_dict, assume set to False
        if 'models_ps_list' in ini_dict:
            psuite = ini_dict['models_ps_list'][imodel]
        else:
            psuite = False
            warnings.warn("Setting psuite to default = "+str(psuite))

        if 'models_dir_list' in ini_dict:
            model_dir = ini_dict['models_dir_list'][imodel]
        else:
            model_dir = os.path.expandvars('$SCRATCH')+\
                        '/mass_retrievals/'+model_id
            warnings.warn("Setting model output dir default = "+model_dir)

        #If mass filenames can not be found from ini_dict, set to None
        filenames = ini_dict.get('mass_filenames', None)

        #If mass directory can not be found from ini_dict, set to None
        # - will be automatically generated by mass retrieve script
        if 'models_mass_dir_list' in ini_dict:
            massdir = ini_dict['models_mass_dir_list'][imodel]
        else:
            massdir = None

        #If moose id (used for NAME data retrievals) cannot be found from
        # ini_dict, set to None
        # - will be automatically generated by mass retrieve script
        if 'models_moose_id_list' in ini_dict:
            moose_id = ini_dict['models_moose_id_list'][imodel]
        else:
            moose_id = None

        #If mass retries can not be found from ini_dict, set to 0
        #(no automatic retries)
        massretries = ini_dict.get('mass_retry_attempts', 0)
        #If mass retry delay can not be found from ini_dict,
        # set to 60 = 1 minute
        massretrydelay = ini_dict.get('mass_retry_delay', 60)


        #If model format can not be found from ini_dict, set to pp
        if 'models_fmt_list' in ini_dict:
            fmt = ini_dict['models_fmt_list'][imodel]
        else:
            fmt = 'pp'
            warnings.warn("Setting fmt to default = "+fmt)

        #Get forecast day, otherwise set to None
        forecast_day = ini_dict.get('forecast_day', None)

        #Now can retrieve data...
        if fmt == 'pp':

            if VERBOSE:
                print("outputdir=", model_dir)
                print("runid=", model_id)
                print("short_name_list=", short_name_list)
                print("start_datetime=", start_datetime)
                print("end_datetime=", end_datetime)
                print("filenames=", filenames)
                print("operational=", operational)
                print("psuite=", psuite)
                print("forecast_day=", forecast_day)
                print("runtime=", runtime)
                print("massdir=", massdir)
                print("massretries=", massretries)
                print("massretrydelay=", massretrydelay)
                print("retrieve=", retrieve)

            #Retrieve data
            adaqcode.pp_data.pp_mass_retrieve(
                outputdir=model_dir,
                runid=model_id,
                short_name_list=short_name_list,
                start_datetime=start_datetime,
                end_datetime=end_datetime,
                filenames=filenames,
                operational=operational,
                psuite=psuite,
                forecast_day=forecast_day,
                runtime=runtime,
                massdir=massdir,
                massretries=massretries,
                massretrydelay=massretrydelay,
                retrieve=retrieve)

        elif fmt == 'nimrod':

            if VERBOSE:
                print("outputdir=", model_dir)
                print("start_datetime=", start_datetime)
                print("end_datetime=", end_datetime)
                print("forecast_day=", forecast_day)
                print("runtime=", runtime)
                print("massretries=", massretries)
                print("massretrydelay=", massretrydelay)
                print("retrieve=", retrieve)

            #Retrieve data
            adaqcode.nimrod_data.nimrod_mass_retrieve(
                outputdir=model_dir,
                start_datetime=start_datetime,
                end_datetime=end_datetime,
                forecast_day=forecast_day,
                runtime=runtime,
                massretries=massretries,
                massretrydelay=massretrydelay,
                retrieve=retrieve)

        elif fmt == 'name':

            if VERBOSE:
                print("outputdir=", model_dir)
                print("start_datetime=", start_datetime)
                print("end_datetime=", end_datetime)
                print("massdir=", massdir)
                print("mooseid=", moose_id)
                print("runid=", model_id)
                print("massretries=", massretries)
                print("massretrydelay=", massretrydelay)
                print("retrieve=", retrieve)

            adaqcode.name_data.name_mass_retrieve(
                outputdir=model_dir,
                start_datetime=start_datetime,
                end_datetime=end_datetime,
                massdir=massdir,
                mooseid=moose_id,
                runid=model_id,
                massretries=massretries,
                massretrydelay=massretrydelay,
                retrieve=retrieve)

        else:
            raise ValueError("Unknown format"+fmt)


if __name__ == "__main__":

    mass_retrieval()

    #import doctest
    #doctest.testmod()
