'''
Example code to plot pie charts
onto a map.
'''
from __future__ import division
from __future__ import print_function

from six.moves.builtins import zip
from six.moves.builtins import str

import os
import sys
#Find adaq directory -
# should be in directory above the one containing this file
adaq_path = os.path.dirname(os.path.realpath(__file__))+'/../'
sys.path.append(adaq_path)
import adaqcode
import numpy as np
import cartopy.feature
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import math
import matplotlib.pyplot as plt
from matplotlib.transforms import Bbox

TEST_DATA = '/home/h03/fris/alipie/allsites0_exampleforNick.csv'

def read_pm_csv(filename=TEST_DATA):
    '''
    Read in csv file containing PM data
    generated by processing a NAME file

    Inputs:
    filename - the name of the file to read. If no
    file is specified defaults to the
    global variable TEST_DATA
    '''

    # open the file read only use np.genfromtxt
    # to get the data
    # Only reads columns:
    # Location,  UK, EUROPE, SHIPPING, BACKGROUND
    # 0          3   4       5         6
    data = np.genfromtxt(filename, delimiter=",",
                         dtype=None,names=True,
                         usecols=(0, 3, 4, 5, 6))

    return data

    
def plot_onmap(sitelon, sitelat, sitedata, labels, title):
    '''
    Plot pie charts on a map

    Inputs:
    sitelon - list of longitudes of sites
    sitelat - list of latitudes of sites
    sitedata - list of list of pm concentrations at the sites
    '''
    
    dims = sitedata.shape

    # size of marker in units of lat/lon
    # scaled by total size of the data
    lsize=7.e-3

    # make an new figure
    plt.figure()

    # set up the axes with cartopy using a Plate Careee projection
    ax = plt.axes(projection=ccrs.PlateCarree())
    fig = plt.gcf()
    ax.coastlines(resolution='50m')
    fig.suptitle(title)

    # Create a feature for countries at 1:50m from Natural Earth
    countries = cfeature.NaturalEarthFeature(
        category='cultural',
        name='admin_0_countries',
        scale='50m',
        facecolor='none')
    # add coutries to the map
    ax.add_feature(countries, edgecolor='gray')

    # choose an extent for the map
    # this extent works well for UK and Ireland
    # leaving space for a legend
    ax.set_extent([-11., 3.5, 49.8, 61.])

    # loop over all the sites with data and plot
    # the pie chart at each
    for x, y, data in zip(sitelon, sitelat, sitedata):

        # calculate the x and y size of the bounding box depending
        # on the total
        piesize=lsize*sum(data)

        # now set up a BBox for the pie chart
        # using bounds so that centred at x, y with
        # a total width of piesize
        bb_data = Bbox.from_bounds(x-piesize/2.,
                                   y-piesize/2., piesize, piesize)
        # transform these data coordinates to figure cordinates
        disp_coords = ax.transData.transform(bb_data)
        fig_coords = fig.transFigure.inverted().transform(disp_coords)
        # now add axes based on these figure cordinates
        fig.add_axes(Bbox(fig_coords))

        # now do the pie chart on this axes
        # we want the sectors to start at the top and
        # go clockwise (default is to start on X-axis and
        # go anticlockwise - I don't know why!)
        # plt.pie( data,  counterclock=False, startangle=90)
        # unfortunately, the counterclock argument is only
        # support from 1.4 onwards.
        plt.pie( data, startangle=90)

    # finally put a legend on. Anchor in figure co-ordinates
    # Don't want to anchor relative to the last axes
    plt.legend(labels,bbox_to_anchor=(0.9, 0.9),
           bbox_transform=plt.gcf().transFigure)

    plt.show()
    

if __name__ == '__main__':

    # path to save figure to 
    fig_path = '/home/h03/fris/alipie/'

    # Title for plot
    title = 'PM speciation'

    # do we want to show the plots on screen or
    # send them to file?
    show = False
    
    data = read_pm_csv()
    # the returned array is a numpy
    # 'structured array' which means that
    # the column headings are stored as
    # data.dtype.names - use these to
    # make the labels for each pie chart
    # sector. Use all entries except 0
    labels = list(data.dtype.names[1:])

    # get information on sites
    si = adaqcode.SitesInfo()
    sitesfile = '/home/h03/apdg/AQUM/AQcases_fcm/code/aq_sites_all.txt'
    sites_data = si.read_from_file(sitesfile, allsites=True)

    # now go through the data array one line
    # at a time i.e. site by site

    pm_sitename=[]
    pm_sitelat=[]
    pm_sitelon=[]
    pm_sitedata=[]
    for site in data:
        # sitenamme is the first entry in the line
        sitename = site.tolist()[0]
        # site data is the rest of the line 
        sitedata = site.tolist()[1:]

        try:
            site_index = list(sites_data['site_name']).index(sitename)
        except:
            print('Site not in sitelist', sitename)
            continue

        sitelon = sites_data[site_index]['longitude']
        sitelat = sites_data[site_index]['latitude']

        
        # store the sitename, lon and lat in a list for later use
        pm_sitename.append(sitename)
        pm_sitelon.append(sitelon)
        pm_sitelat.append(sitelat)
        pm_sitedata.append(sitedata)

        plt.pie(sitedata, labels=labels)
        plt.axis('equal')
        plt.title(sitename + ': ' + str(sitelon) + ', ' + str(sitelat), y=1.07)
        # save to png - can also use eps for example
        piefile = fig_path + sitename +'.png'
        if show:
            plt.show()
        else:
            plt.savefig(piefile)
        plt.close()

    # turn the list of tuples into a numpy array to make
    # it easier to use
    pm_sitedata = np.asarray(pm_sitedata)

    # now call routine to do plotting on the map
    plot_onmap(pm_sitelon, pm_sitelat, pm_sitedata, labels, title)
